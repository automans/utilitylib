package auto.lib.string;

import java.util.ArrayList;
import java.util.Arrays;

import java.util.UUID;
import java.util.regex.*;

public class StringUtils {
	
	public static ArrayList<String> getMatchStrings(String src,String pattern){
		ArrayList<String> strs = new ArrayList<String>();
		
		Pattern p = Pattern.compile(pattern);
        Matcher m = p.matcher(src);
        while (m.find()) {
            strs.add(m.group(1));            
        }
        return strs;
	}
	
	public static boolean isMatch(String pattern, String content){
		return Pattern.matches(pattern, content);
	}
	
	public static int getKeyWordCount(String src, String keyword){
		int count = 0;
        int index = 0;
        while( ( index = src.indexOf(keyword, index) ) != -1 )
        {
            index = index+keyword.length();
            count++;
        }
        return count;
	}
	public static int getWordCount(String src, String keyword){
		int count = 0;
        int index = 0;
        while( ( index = src.indexOf(keyword, index) ) != -1 )
        {
            index = index+keyword.length();
            count++;
        }
        return count;
	}
	public static boolean isWordExist(String src, String keyword){
		if(src.indexOf(keyword) > 0){
			return true;
		}else{
			return false;
		}
	}
	public static boolean isKeyWordExist(String src, String keyword){
		if(src.indexOf(keyword) > 0){
			return true;
		}else{
			return false;
		}
	}
	public static String strReplace(String str, String src,String replace){
		return str.replace(src, replace);
	}
	public static String strReplaceAll(String str, String src, String replace){
		return str.replaceAll(src, replace);
	}
	public static String strSub(String str,int start, int n){
		return str.substring(start-1,n);
	}
	public static String strSub(String str,int start){
		return str.substring(start-1);
	}
	public static String strTrim(String str){
		return str.trim();
	}
	public static boolean isStartWith(String str, String prefix){
		return str.startsWith(prefix);
	}
	public static boolean isEndWith(String str, String suffix){
		return str.endsWith(suffix);
	}
	public static String strToUpCase(String str){
		return str.toUpperCase();
	}
	public static String toUpCase(String str){
		return str.toUpperCase();
	}
	public static String strToLowerCase(String str){
		return str.toLowerCase();
	}
	public static String toLowerCase(String str){
		return str.toLowerCase();
	}
	public static String[] strSplit(String str,String sign){
		String[] strArray = {};
		strArray = str.split(sign);
		return strArray;
	}
	public static boolean strCompare(String A, String B){
		if(A.equals(B))
		{
			return true;
		}else{
			return false;
		}
	}
	public static boolean isStrNull(String str){
		if(str == null || str.isEmpty() || str == ""){
			return true;
		}else{
			return false;
		}
	}
	public static boolean isNull(String str){
		if(str == null || str.isEmpty() || str == ""){
			return true;
		}else{
			return false;
		}
	}
	public static String strJoin(String a, String b){
		return a.concat(b);
	}
	public static String getStringByIndex(String str, int index){
		if(str.length() < index)
			return "nil";
		char[] charArray = str.toCharArray();
		return String.valueOf(charArray[index-1]);
	}
	public static String getStringByIndex(String[] str, int index){
		if(str.length < index)
			return "nil";
		return String.valueOf(strTrim(str[index-1]));
	}
	public static String getStringByIndex(String[] str, String index){
		if(str.length < Integer.parseInt(index))
			return "nil";
		return String.valueOf(strTrim(str[Integer.parseInt(index)-1]));
	}
	public static String strReverse(String str){
		return new StringBuffer(str).reverse().toString();
	}
	
	public static String strSortUp(String str){
		 char[] s1 = str.toCharArray();
		 for(int i=0;i<s1.length;i++){
		     for(int j=0;j<i;j++){
		         if(s1[i]<s1[j]){
		             char temp = s1[i];
		             s1[i] = s1[j];
		             s1[j] = temp;
		         }
		     }
		 }
		 String st = new String(s1);
		 return st;
	}
	public static String strSortDown(String str){
		 char[] s1 = str.toCharArray();
		 for(int i=0;i<s1.length;i++){
		     for(int j=0;j<i;j++){
		         if(s1[i]>s1[j]){
		             char temp = s1[i];
		             s1[i] = s1[j];
		             s1[j] = temp;
		         }
		     }
		 }
		 String st = new String(s1);
		 return st;
	}
	public static double[] arraySort(double[] strs){
		Arrays.sort(strs);
		return strs;
	}
	public static int[] arraySort(int[] num){
		Arrays.sort(num);
		return num;
	}
	public static String[] arraySort(String[] strs){
		Arrays.sort(strs);
		return strs;
	}
	public static long[] arraySort(long[] num){
		Arrays.sort(num);
		return num;
	}
	public static String strJoin(String[] str){
		StringBuffer sb = new StringBuffer();
		for(int i = 0; i < str.length; i++){
		 sb.append(str[i]);
		}
		return sb.toString();
	}
	public static String strJoin(String[] str, String separator){
		StringBuffer sb = new StringBuffer();
		for(int i = 0; i < str.length; i++){
			sb.append(str[i]);
			if(i < str.length -1)
				sb.append(separator);
		}
		return sb.toString();
	}
	public static String getUUID(boolean type){
		if(type){
			return UUID.randomUUID().toString();
		}else{
			return UUID.randomUUID().toString().replaceAll("-", "");
		}
	}
	
	public static byte[] toByteArray(String s){
		return s.getBytes();
	}
	public static String toString(byte[] bte){
		return(new String(bte));
	}
	public static String numIncrement(String num,String baseNum){
    	Long numTemp = new Long(Long.parseLong(num));
    	Long numBaseTemp = new Long(Long.parseLong(baseNum));
    	Long newNum = numTemp + numBaseTemp;
    	return Long.toString(newNum);
    }
	
	public static void main(String[] args){
		//System.out.println(getUUID(true));		
		
	//	String maap = "\xAC\xED\x00\x05sr\x00\x11java.util.HashMap\x05\x07\xDA\xC1\xC3\x16`\xD1\x03\x00\x02F\x00\x0AloadFactorI\x00\x09thresholdxp?@\x00\x00\x00\x00\x00\x0Cw\x08\x00\x00\x00\x10\x00\x00\x00\x02t\x00\x04rolesr\x00\x13java.util.ArrayListx\x81\xD2\x1D\x99\xC7a\x9D\x03\x00\x01I\x00\x04sizexp\x00\x00\x00\x1Bw\x04\x00\x00\x00\x1Bsr\x001org.springframework.util.LinkedCaseInsensitiveMap(:\x0C5\x0AK\xF2T\x02\x00\x02L\x00\x13caseInsensitiveKeyst\x00\x0FLjava/util/Map;L\x00\x06localet\x00\x12Ljava/util/Locale;xr\x00\x17java.util.LinkedHashMap4\xC0N\\x10l\xC0\xFB\x02\x00\x01Z\x00\x0BaccessOrderxq\x00~\x00\x00?@\x00\x00\x00\x00\x00\x03w\x08\x00\x00\x00\x04\x00\x00\x00\x02t\x00\x07role_idt\x00\x041010t\x00\x09role_namet\x00\x09\xE7\xAE\xA1\xE7\x90\x86\xE5\x91\x98x\x00sq\x00~\x00\x00?@\x00\x00\x00\x00\x00\x03w\x08\x00\x00\x00\x04\x00\x00\x00\x02q\x00~\x00\x0Cq\x00~\x00\x0Cq\x00~\x00\x0Aq\x00~\x00\x0Axsr\x00\x10java.util.Locale~\xF8\x11`\x9C0\xF9\xEC\x03\x00\x06I\x00\x08hashcodeL\x00\x07countryt\x00\x12Ljava/lang/String;L\x00\x0Aextensionsq\x00~\x00\x10L\x00\x08languageq\x00~\x00\x10L\x00\x06scriptq\x00~\x00\x10L\x00\x07variantq\x00~\x00\x10xp\xFF\xFF\xFF\xFFt\x00\x02USt\x00\x00t\x00\x02enq\x00~\x00\x13q\x00~\x00\x13xsq\x00~\x00\x05?@\x00\x00\x00\x00\x00\x03w\x08\x00\x00\x00\x04\x00\x00\x00\x02q\x00~\x00\x0At\x00\x041020q\x00~\x00\x0Ct\x00\x0C\xE5\x88\x86\xE7\xAE\xA1\xE9\xA2\x86\xE5\xAF\xBCx\x00sq\x00~\x00\x00?@\x00\x00\x00\x00\x00\x03w\x08\x00\x00\x00\x04\x00\x00\x00\x02q\x00~\x00\x0Cq\x00~\x00\x0Cq\x00~\x00\x0Aq\x00~\x00\x0Axq\x00~\x00\x11sq\x00~\x00\x05?@\x00\x00\x00\x00\x00\x03w\x08\x00\x00\x00\x04\x00\x00\x00\x02q\x00~\x00\x0At\x00\x041021q\x00~\x00\x0Ct\x00\x06\xE7\xBB\x8F\xE7\x90\x86x\x00sq\x00~\x00\x00?@\x00\x00\x00\x00\x00\x03w\x08\x00\x00\x00\x04\x00\x00\x00\x02q\x00~\x00\x0Cq\x00~\x00\x0Cq\x00~\x00\x0Aq\x00~\x00\x0Axq\x00~\x00\x11sq\x00~\x00\x05?@\x00\x00\x00\x00\x00\x03w\x08\x00\x00\x00\x04\x00\x00\x00\x02q\x00~\x00\x0At\x00\x041022q\x00~\x00\x0Ct\x00\x0C\xE5\xAE\xA2\xE6\x88\xB7\xE7\xBB\x8F\xE7\x90\x86x\x00sq\x00~\x00\x00?@\x00\x00\x00\x00\x00\x03w\x08\x00\x00\x00\x04\x00\x00\x00\x02q\x00~\x00\x0Cq\x00~\x00\x0Cq\x00~\x00\x0Aq\x00~\x00\x0Axq\x00~\x00\x11sq\x00~\x00\x05?@\x00\x00\x00\x00\x00\x03w\x08\x00\x00\x00\x04\x00\x00\x00\x02q\x00~\x00\x0At\x00\x041030q\x00~\x00\x0Ct\x00\x0C\xE7\x8E\xB0\xE5\x9C\xBA\xE7\xAE\xA1\xE7\x90\x86x\x00sq\x00~\x00\x00?@\x00\x00\x00\x00\x00\x03w\x08\x00\x00\x00\x04\x00\x00\x00\x02q\x00~\x00\x0Cq\x00~\x00\x0Cq\x00~\x00\x0Aq\x00~\x00\x0Axq\x00~\x00\x11sq\x00~\x00\x05?@\x00\x00\x00\x00\x00\x03w\x08\x00\x00\x00\x04\x00\x00\x00\x02q\x00~\x00\x0At\x00\x041111q\x00~\x00\x0Ct\x00\x06\xE5\xAE\xA2\xE6\x9C\x8Dx\x00sq\x00~\x00\x00?@\x00\x00\x00\x00\x00\x03w\x08\x00\x00\x00\x04\x00\x00\x00\x02q\x00~\x00\x0Cq\x00~\x00\x0Cq\x00~\x00\x0Aq\x00~\x00\x0Axq\x00~\x00\x11sq\x00~\x00\x05?@\x00\x00\x00\x00\x00\x03w\x08\x00\x00\x00\x04\x00\x00\x00\x02q\x00~\x00\x0At\x00\x044001q\x00~\x00\x0Ct\x00\x15\xE7\x94\xB5\xE9\x94\x80\xE7\x8E\xB0\xE5\x9C\xBA\xE7\xAE\xA1\xE7\x90\x86\xE5\x91\x98x\x00sq\x00~\x00\x00?@\x00\x00\x00\x00\x00\x03w\x08\x00\x00\x00\x04\x00\x00\x00\x02q\x00~\x00\x0Cq\x00~\x00\x0Cq\x00~\x00\x0Aq\x00~\x00\x0Axq\x00~\x00\x11sq\x00~\x00\x05?@\x00\x00\x00\x00\x00\x03w\x08\x00\x00\x00\x04\x00\x00\x00\x02q\x00~\x00\x0At\x00\x044002q\x00~\x00\x0Ct\x00\x15\xE5\xAE\xA2\xE6\x9C\x8D\xE7\x8E\xB0\xE5\x9C\xBA\xE7\xAE\xA1\xE7\x90\x86\xE5\x91\x98x\x00sq\x00~\x00\x00?@\x00\x00\x00\x00\x00\x03w\x08\x00\x00\x00\x04\x00\x00\x00\x02q\x00~\x00\x0Cq\x00~\x00\x0Cq\x00~\x00\x0Aq\x00~\x00\x0Axq\x00~\x00\x11sq\x00~\x00\x05?@\x00\x00\x00\x00\x00\x03w\x08\x00\x00\x00\x04\x00\x00\x00\x02q\x00~\x00\x0At\x00\x045001q\x00~\x00\x0Ct\x00\x0C\xE6\x99\xAE\xE9\x80\x9A\xE5\x9D\x90\xE5\xB8\xADx\x00sq\x00~\x00\x00?@\x00\x00\x00\x00\x00\x03w\x08\x00\x00\x00\x04\x00\x00\x00\x02q\x00~\x00\x0Cq\x00~\x00\x0Cq\x00~\x00\x0Aq\x00~\x00\x0Axq\x00~\x00\x11sq\x00~\x00\x05?@\x00\x00\x00\x00\x00\x03w\x08\x00\x00\x00\x04\x00\x00\x00\x02q\x00~\x00\x0At\x00\x045002q\x00~\x00\x0Ct\x00\x0C\xE5\x88\x86\xE6\xB4\xBE\xE4\xBA\xBA\xE5\x91\x98x\x00sq\x00~\x00\x00?@\x00\x00\x00\x00\x00\x03w\x08\x00\x00\x00\x04\x00\x00\x00\x02q\x00~\x00\x0Cq\x00~\x00\x0Cq\x00~\x00\x0Aq\x00~\x00\x0Axq\x00~\x00\x11sq\x00~\x00\x05?@\x00\x00\x00\x00\x00\x03w\x08\x00\x00\x00\x04\x00\x00\x00\x02q\x00~\x00\x0At\x00\x045003q\x00~\x00\x0Ct\x00\x0C\xE5\xA4\x84\xE7\x90\x86\xE4\xBA\xBA\xE5\x91\x98x\x00sq\x00~\x00\x00?@\x00\x00\x00\x00\x00\x03w\x08\x00\x00\x00\x04\x00\x00\x00\x02q\x00~\x00\x0Cq\x00~\x00\x0Cq\x00~\x00\x0Aq\x00~\x00\x0Axq\x00~\x00\x11sq\x00~\x00\x05?@\x00\x00\x00\x00\x00\x03w\x08\x00\x00\x00\x04\x00\x00\x00\x02q\x00~\x00\x0At\x00\x045004q\x00~\x00\x0Ct\x00\x0C\xE5\x9B\x9E\xE5\xA4\x8D\xE4\xBA\xBA\xE5\x91\x98x\x00sq\x00~\x00\x00?@\x00\x00\x00\x00\x00\x03w\x08\x00\x00\x00\x04\x00\x00\x00\x02q\x00~\x00\x0Cq\x00~\x00\x0Cq\x00~\x00\x0Aq\x00~\x00\x0Axq\x00~\x00\x11sq\x00~\x00\x05?@\x00\x00\x00\x00\x00\x03w\x08\x00\x00\x00\x04\x00\x00\x00\x02q\x00~\x00\x0At\x00\x046100q\x00~\x00\x0Ct\x00\x0F\xE7\x94\xB5\xE9\x94\x80\xE7\xAE\xA1\xE7\x90\x86\xE5\x91\x98x\x00sq\x00~\x00\x00?@\x00\x00\x00\x00\x00\x03w\x08\x00\x00\x00\x04\x00\x00\x00\x02q\x00~\x00\x0Cq\x00~\x00\x0Cq\x00~\x00\x0Aq\x00~\x00\x0Axq\x00~\x00\x11sq\x00~\x00\x05?@\x00\x00\x00\x00\x00\x03w\x08\x00\x00\x00\x04\x00\x00\x00\x02q\x00~\x00\x0At\x00\x046101q\x00~\x00\x0Ct\x00\x15\xE7\x94\xB5\xE9\x94\x80\xE6\x95\xB0\xE6\x8D\xAE\xE5\xAF\xBC\xE5\x85\xA5\xE5\xB2\x97x\x00sq\x00~\x00\x00?@\x00\x00\x00\x00\x00\x03w\x08\x00\x00\x00\x04\x00\x00\x00\x02q\x00~\x00\x0Cq\x00~\x00\x0Cq\x00~\x00\x0Aq\x00~\x00\x0Axq\x00~\x00\x11sq\x00~\x00\x05?@\x00\x00\x00\x00\x00\x03w\x08\x00\x00\x00\x04\x00\x00\x00\x02q\x00~\x00\x0At\x00\x046102q\x00~\x00\x0Ct\x00\x0C\xE7\x94\xB5\xE9\x94\x80\xE7\xBB\x84\xE9\x95\xBFx\x00sq\x00~\x00\x00?@\x00\x00\x00\x00\x00\x03w\x08\x00\x00\x00\x04\x00\x00\x00\x02q\x00~\x00\x0Cq\x00~\x00\x0Cq\x00~\x00\x0Aq\x00~\x00\x0Axq\x00~\x00\x11sq\x00~\x00\x05?@\x00\x00\x00\x00\x00\x03w\x08\x00\x00\x00\x04\x00\x00\x00\x02q\x00~\x00\x0At\x00\x046103q\x00~\x00\x0Ct\x00\x09\xE7\x94\xB5\xE9\x94\x80\xE5\x91\x98x\x00sq\x00~\x00\x00?@\x00\x00\x00\x00\x00\x03w\x08\x00\x00\x00\x04\x00\x00\x00\x02q\x00~\x00\x0Cq\x00~\x00\x0Cq\x00~\x00\x0Aq\x00~\x00\x0Axq\x00~\x00\x11sq\x00~\x00\x05?@\x00\x00\x00\x00\x00\x03w\x08\x00\x00\x00\x04\x00\x00\x00\x02q\x00~\x00\x0At\x00\x046106q\x00~\x00\x0Ct\x00\x09\xE8\xB4\xA8\xE6\xA3\x80\xE5\x91\x98x\x00sq\x00~\x00\x00?@\x00\x00\x00\x00\x00\x03w\x08\x00\x00\x00\x04\x00\x00\x00\x02q\x00~\x00\x0Cq\x00~\x00\x0Cq\x00~\x00\x0Aq\x00~\x00\x0Axq\x00~\x00\x11sq\x00~\x00\x05?@\x00\x00\x00\x00\x00\x03w\x08\x00\x00\x00\x04\x00\x00\x00\x02q\x00~\x00\x0At\x00\x046107q\x00~\x00\x0Ct\x00\x0C\xE8\xB4\xA8\xE6\xA3\x80\xE7\xBB\x84\xE9\x95\xBFx\x00sq\x00~\x00\x00?@\x00\x00\x00\x00\x00\x03w\x08\x00\x00\x00\x04\x00\x00\x00\x02q\x00~\x00\x0Cq\x00~\x00\x0Cq\x00~\x00\x0Aq\x00~\x00\x0Axq\x00~\x00\x11sq\x00~\x00\x05?@\x00\x00\x00\x00\x00\x03w\x08\x00\x00\x00\x04\x00\x00\x00\x02q\x00~\x00\x0At\x00\x046108q\x00~\x00\x0Ct\x00\x0C\xE8\xB4\xA8\xE6\xA3\x80\xE4\xB8\xBB\xE7\xAE\xA1x\x00sq\x00~\x00\x00?@\x00\x00\x00\x00\x00\x03w\x08\x00\x00\x00\x04\x00\x00\x00\x02q\x00~\x00\x0Cq\x00~\x00\x0Cq\x00~\x00\x0Aq\x00~\x00\x0Axq\x00~\x00\x11sq\x00~\x00\x05?@\x00\x00\x00\x00\x00\x03w\x08\x00\x00\x00\x04\x00\x00\x00\x02q\x00~\x00\x0At\x00\x046109q\x00~\x00\x0Ct\x00\x12\xE7\x94\xB5\xE9\x94\x80\xE5\x8C\xBA\xE5\x9F\x9F\xE4\xB8\xBB\xE7\xAE\xA1x\x00sq\x00~\x00\x00?@\x00\x00\x00\x00\x00\x03w\x08\x00\x00\x00\x04\x00\x00\x00\x02q\x00~\x00\x0Cq\x00~\x00\x0Cq\x00~\x00\x0Aq\x00~\x00\x0Axq\x00~\x00\x11sq\x00~\x00\x05?@\x00\x00\x00\x00\x00\x03w\x08\x00\x00\x00\x04\x00\x00\x00\x02q\x00~\x00\x0At\x00\x046200q\x00~\x00\x0Ct\x00\x0F\xE8\xB4\xA8\xE6\xA3\x80\xE7\xAE\xA1\xE7\x90\x86\xE5\x91\x98x\x00sq\x00~\x00\x00?@\x00\x00\x00\x00\x00\x03w\x08\x00\x00\x00\x04\x00\x00\x00\x02q\x00~\x00\x0Cq\x00~\x00\x0Cq\x00~\x00\x0Aq\x00~\x00\x0Axq\x00~\x00\x11sq\x00~\x00\x05?@\x00\x00\x00\x00\x00\x03w\x08\x00\x00\x00\x04\x00\x00\x00\x02q\x00~\x00\x0At\x00\x046400q\x00~\x00\x0Ct\x00\x15\xE7\x94\xB5\xE9\x94\x80\xE6\x95\xB0\xE6\x8D\xAE\xE5\x88\x86\xE9\x85\x8D\xE5\xB2\x97x\x00sq\x00~\x00\x00?@\x00\x00\x00\x00\x00\x03w\x08\x00\x00\x00\x04\x00\x00\x00\x02q\x00~\x00\x0Cq\x00~\x00\x0Cq\x00~\x00\x0Aq\x00~\x00\x0Axq\x00~\x00\x11sq\x00~\x00\x05?@\x00\x00\x00\x00\x00\x03w\x08\x00\x00\x00\x04\x00\x00\x00\x02q\x00~\x00\x0At\x00\x047001q\x00~\x00\x0Ct\x00\x0C\xE5\x9F\xB9\xE8\xAE\xAD\xE4\xB8\xBB\xE7\xAE\xA1x\x00sq\x00~\x00\x00?@\x00\x00\x00\x00\x00\x03w\x08\x00\x00\x00\x04\x00\x00\x00\x02q\x00~\x00\x0Cq\x00~\x00\x0Cq\x00~\x00\x0Aq\x00~\x00\x0Axq\x00~\x00\x11sq\x00~\x00\x05?@\x00\x00\x00\x00\x00\x03w\x08\x00\x00\x00\x04\x00\x00\x00\x02q\x00~\x00\x0At\x00\x047002q\x00~\x00\x0Ct\x00\x0C\xE5\x9F\xB9\xE8\xAE\xAD\xE4\xB8\x93\xE5\x91\x98x\x00sq\x00~\x00\x00?@\x00\x00\x00\x00\x00\x03w\x08\x00\x00\x00\x04\x00\x00\x00\x02q\x00~\x00\x0Cq\x00~\x00\x0Cq\x00~\x00\x0Aq\x00~\x00\x0Axq\x00~\x00\x11sq\x00~\x00\x05?@\x00\x00\x00\x00\x00\x03w\x08\x00\x00\x00\x04\x00\x00\x00\x02q\x00~\x00\x0At\x00\x047003q\x00~\x00\x0Ct\x00\x06\xE8\x80\x83\xE7\x94\x9Fx\x00sq\x00~\x00\x00?@\x00\x00\x00\x00\x00\x03w\x08\x00\x00\x00\x04\x00\x00\x00\x02q\x00~\x00\x0Cq\x00~\x00\x0Cq\x00~\x00\x0Aq\x00~\x00\x0Axq\x00~\x00\x11sq\x00~\x00\x05?@\x00\x00\x00\x00\x00\x03w\x08\x00\x00\x00\x04\x00\x00\x00\x02q\x00~\x00\x0At\x00\x048888q\x00~\x00\x0Ct\x00\x0F\xE6\x89\xB9\xE9\x87\x8F\xE7\xAE\xA1\xE7\x90\x86\xE5\x91\x98x\x00sq\x00~\x00\x00?@\x00\x00\x00\x00\x00\x03w\x08\x00\x00\x00\x04\x00\x00\x00\x02q\x00~\x00\x0Cq\x00~\x00\x0Cq\x00~\x00\x0Aq\x00~\x00\x0Axq\x00~\x00\x11sq\x00~\x00\x05?@\x00\x00\x00\x00\x00\x03w\x08\x00\x00\x00\x04\x00\x00\x00\x02q\x00~\x00\x0At\x00\x049999q\x00~\x00\x0Ct\x00\x0F\xE7\xB3\xBB\xE7\xBB\x9F\xE7\xAE\xA1\xE7\x90\x86\xE5\x91\x98x\x00sq\x00~\x00\x00?@\x00\x00\x00\x00\x00\x03w\x08\x00\x00\x00\x04\x00\x00\x00\x02q\x00~\x00\x0Cq\x00~\x00\x0Cq\x00~\x00\x0Aq\x00~\x00\x0Axq\x00~\x00\x11xt\x00\x02idq\x00~\x00\x02x";
	}
    
}
